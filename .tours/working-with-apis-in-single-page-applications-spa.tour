{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Working with APIs in Single Page Applications (SPA)",
  "steps": [
    {
      "title": "What you'll do",
      "description": "**Here's what you'll do:**  \n\nIn this lab, you will learn how to make your Single-Page Application (SPA) consume, on behalf of the user, the private endpoint exposed by an API.\n\nThe SPA in question is a vanilla JavaScript application that consumes the Expenses API.\n\nIn this exercise, you will focus on updating the SPA to request access to the API and secure the request to the private Expenses API endpoint.\n"
    },
    {
      "title": "Configure the Web App and API in Auth0",
      "description": "\n  Could walk through the steps as below, or create with the CLI (or both options). Then show the learner where the values from the dashboard end up here in the envvars before moving on. \n\n\n\n\n## Configure the Web App and API in Auth0\nIn order to complete this lab, you'll need to have the single-page-application and expenses-api set up in your Auth0 tenant. \n\nIf you've already created these in your tenant during a previous lab, you won't need to complete the following steps. Simply move on to the next part of this codetour, dealing with making application-level adjustments.\n\n### Configuring the API in Auth0\n\nIn the Auth0 Dashboard, go to the [APIs page](https://manage.auth0.com/#/apis), and click the Create API button.\n\nSince this API will handle the expenses for our application, we'll name it 'expenses-api'.\n\nFor the Identifier field, copy and paste `https://expenses-api` and click **Create**.\n\nClick the Permissions tab and add a new permission called `read:reports` with a suitable description. This custom permission is the one you will use to determine whether the client is authorized to retrieve expenses.\n\nExcellent. Your API is registered with Auth0.\n\n\n### Configuring the Application in Auth0\n\nTo register this Single Page Application with Auth0, log into the Auth0 Dashboard, go to the [Applications page](https://manage.auth0.com/#/applications), and select **Create Application**.\n\nName it \"single-page-application\", choose Single Page Web Application for the type, and click **Create**.\n\nYou should now see the Quickstart section that describes how to integrate Auth0 with a production application. Click the **Settings** tab at the top to see the Application settings.\n\nYour application is now registered in Auth0."
    },
    {
      "title": "Launch the Web App and API",
      "description": "## Launch the Web App and API\n- Bobby's debug magic.\n- Direct learner to visit the app and note the URLs"
    },
    {
      "title": "Update the Application Configuration in Auth0",
      "description": "## Update the Application Configuration in Auth0\nNow that the application is deployed, we need to update the application settings in Auth0 to reflect the deployment URLs.\n\n1. Go to the [Applications page](https://manage.auth0.com/#/applications), and click the single-page-application in the application list view.\n\n1. On the Settings tab, scroll down to the Application URIs section.\n\n1. Add `https://{your-spa-application-url}` to the Allowed Callback URLs field.\n\n1. Add `https://{your-spa-application-url}` to the Allowed Logout URLs field.\n\n1. Add `https://{your-spa-application-url}` to the Allowed Web Origins field.\n\n1. Scroll down and click **Save Changes**."
    },
    {
      "file": "src/spa-app/app.js",
      "description": "## Calling an API\n\nTo make your SPA consume the private endpoint on the user's behalf, it must fetch an access token first, then call the protected API. The first time your application asks for an access token for an API, the authorization server will request explicit consent from your users.\n\nTo request this consent, your application needs to be updated to include the request during the authentication process. Once the user has authenticated they will be prompted to grant consent. On that page, your users will learn what type of access your application is requesting, and they will be able to grant access or deny it.\n\nWe'll do this by making changes here in the spa-app > app.js file.",
      "line": 22,
      "selection": {
        "start": {
          "line": 22,
          "character": 5
        },
        "end": {
          "line": 22,
          "character": 6
        }
      }
    },
    {
      "file": "src/spa-app/app.js",
      "description": "## Requesting Consent\nHere, we'll update the spa-app's code to include the audience and scope that users will need to grant consent to.\n\n``` jsx\nwindow.auth0Client = await createAuth0Client({\n  domain,\n  client_id,\n  redirect_uri,\n  cacheLocation: \"localstorage\",\n  audience: \"https://expenses-api\", // ðŸ‘ˆ Added\n  scope: \"read:reports\", // ðŸ‘ˆ Added\n});\n```\n\nThese additional properties tell the SPA SDK the audience and scope needed in the access token your application will request. The SDK will try to fetch access tokens capable of consuming the `https://expenses-api` API with the `read:reports` scope.",
      "line": 13,
      "selection": {
        "start": {
          "line": 8,
          "character": 1
        },
        "end": {
          "line": 13,
          "character": 6
        }
      }
    },
    {
      "file": "src/spa-app/services/expensesApi.js",
      "description": "## The expensesApi.js File\nAbove, you can see all the code used to request data from the Expenses API. There are two functions defined: `getTotals` and `getReports`. The getTotals function calls the Expenses API, but the `getReports` function is hardcoded with data.\n\nLet's change this, so that the data is requested from the API instead.",
      "line": 39
    },
    {
      "file": "src/spa-app/services/expensesApi.js",
      "description": "## Replace Hard-Coded Data with the API Call\n\nThis code specifies the call for data to the Expenses API.\n\nThe new lines are nested inside a `try/catch` block and are executed when the expenses view is requested.\n\nFirst, the application calls the `getTokenSilently()` method (provided by the SPA SDK) to fetch a token without involving your user.\n\nAfter fetching an access token, the application will issue a request to the private API on the user's behalf.\n\nNote the authorization header passed to the `fetch()` function; this header includes the access token required to consume the expenses API.\n\n``` jsx\nconst token = await window.auth0Client.getTokenSilently();\nconst options = {\n    method: \"GET\",\n    headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`,\n    },\n};\nconst res = await fetch(`${window.env.API_URL}/reports`, options);\nconst json = await res.json();\nreturn json;\n```",
      "line": 21,
      "selection": {
        "start": {
          "line": 21,
          "character": 1
        },
        "end": {
          "line": 32,
          "character": 9
        }
      }
    },
    {
      "title": "Give it a try!",
      "description": "## Give it a try!\nYou are now ready to test the new version of the application. \n\n(( Debug relaunch here again, or will that have updated as we progressed? ))\n\n1. Click the Login link to start the authentication process. Log in with your database user.\n\n  The homepage now addresses you by name and your profile image will be shown near the upper-right corner:\n\n  ![image11](https://cdn.auth0.com/website/training/example/IDFUN-M04-L01-Ex03/img-11.png)\n  \n  1. Click the Expenses link, the SPA will call the Expenses API and show the data retrieved.\n\n  ![image15](https://cdn.auth0.com/website/training/example/IDFUN-M04-L01-Ex03/img-15.png)\n\nYou have successfully updated the SPA application to call a secure API."
    }
  ],
  "ref": "main"
}